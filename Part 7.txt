함수의 작성과 사용

함수란?
기능을 수행하는 코드 단위
-> printf(), scanf()
와 같이 특정기능을 미리 약속하고 프로그램에서 바로 사용할 수 있게 구현되어있는 함수 
표준 라이브러리 함수라고 함
이둘 모두 <stdio.h>라이브러리에 포함되어있는 것임

함수를 만드려면 세가지가 필요함
함수 정의 ; 함수를 실제 코드로 만드는 것으로 함수의 기능을 구현
함수 호출 ; 함수 호출을 하여 함수를 사용
함수 선언 ; 프로그램 상단에 어떤 함수를 사용할 것이라고 컴파일러에 정보를 주는 역할

함수정의

함수를 다른 함수안에서 정의할 수 없음

새로운 함수를 만들때 생각해야하는 것
1. 기능에 맞는 이름             ; 함수명
2. 기능을 수행할 떄 필요한 데이터 ; 매개변수
3. 함수가 수행된 후의 결과       ; 반환형

반환형 함수명( 매개변수1, 매개변수2 ) {
    명령
    return
}
이것이 함수 원형

-> 함수 정의

함수 호출
result = sum(a, b);
이름을 사용하여 함수에 필요한 데이터를 괄호안에 넣어줌.
                        (인수)
이 인수의 값은 호출된 함수의 매개변수에 복사되어 사용됨.
sum 함수 호출 -> main함수의 실행은 잠시 멈춤 sum함수 정의 부분 실행. -> 인수는 함수의 매개변수에 순서대로 복사되어 sum함수 안에서 실행됨

함수 반환
호출된 함수의 실행이 끝나고 값을 반환할때 reutrn문을 사용함.
컴파일러는 함수를 호출할때 반환값을 저장할 공간을 미리 준비해둠
이에 따라 저장된 반환값을 대입연산으로 다른 변수에 복사하거나 수식에 바로 사용하는 것도 가능함.

함수 선언
함수원형
int sum(int a, int b)
에 세미콜론을 박은 형태
컴파일러에게 새로운 함수를 인식할 수 있도록 함
매개 변수의 이름은 생략할 수 있음

필요한 이유?
1. 반환값의 형태를 파악하기 위해. (int or double ;;;)
-> 함수정의에서도 확인가능하므로, 함수 호출이전에 함수를 정의하는 방법도 가능
int main {    int sum {

}             }
            ->
int sum {     int main{

}             }
우측 처럼 써야지 함수 선언이 없는 경우에도 사용가능하다.
하지만 순서는 main함수먼저 시작하기 때문에 실행순서는 같다.
---- 하지만 함수 선언을 쓰는 이유;
함수간의 호출관계가 꼬여있는 경우 순서에 맞게 정의해야하지만 이것이 쉽지 않기 때문.
또한 분할컴파일하는 프로그램의 경우에서 반드시 선언이 필요하기 때문.

2. 함수의 호출형식에 문제가 없는지 검사.
정확한 값이 되어있는지 검사할 수 있음.


7-2 여러가지 함수 유형

매개변수가 없는 함수.
매개변수 자리에 void를 사용하면 가능.

이 함수를 호출할때는 함수명()으로 호출하면 됨.
함수명(void) , 함수명은 각각 호출할때는 void 사용x, 그냥 함수의 이름으로 인식 하므로 괄호만 사용

반환값이 없는 함수.
void 함수명(매개변수);
return;을 써도 되고 생략해도 됨
알아서 흐름으로 돌아갈 것임
--> 반환값이 없으면 컴파일러 또하 반환값이 없다고 생각하고 저장할 공간을 마련하지 않음.

매개변수, 반환값이 모두 없는 함수.
둘의 특징을 모두 가짐

재귀호출 함수.
자기 자신을 호출함.
함수가 끊임없이 자기자신을 호출한다면 무수히 반복하다가 종료됨
-> 함수는 호출만으로 일정크기의 메모리를 사용함. 만일 무한 호출하면 프로그램 하나가 사용할 수 있는 메모리 를 모두 사용하게 되어 메모리 부족으로 강제종료되는 것.

반복문과 재귀호출의 차이점
int fruit(int count) {
    printf("apple\n");
    if (count == 3) reutrn;
    fruit(count + 1);
    //printf("jam\n");
}

int fruit(int count) {
    for ( int i = 0 ; i < 3 ; i++) {
        printf("apple\n");
    }
    reutrn
}
위와 같은 함수들이 있다고 했을때 차이점은
밑에 다른 코드를 추가했을 때 알수 있따.
위 함수를 출력하면
apple x3 . jam x2 출력될것이다.
함수의 호출이 끝나면 함수를 호출했던 곳으로 다시 돌아가서 실행되기 떄문이다.