2,3,4
총정리 == 
데이터 저장공간확보( 변수, 배열) -> 확보된 공간에 데이터 입력 ( scanf, 대입연산자) -> 데이터가공 ( 연산자 ) -> 화면에 출력 ( printf )

5-1 
if 문

if ( 조건 ) {

} -> 기본 형태

if (조건) 원하는 식
if 문을 중괄호로 두르지 않으면 밑에 식 하나만 실행이 되고, 이후로는 if문이 끝났다고 생각함

if ; else if ; else ;
로 조건식에 따라서 실행 형태를 제어할 수 있고, 
조건에 충족하는 것 하나를 먼저 실행하고 나머지는 건너뛰게 된다.

if문을 중첩해서 사용할 수 있음
-> 이유 : 선행조건으로 불필요한 조건 검사를 줄임
         선행조건이 없어도 실행효율을 위해 의도적으로 중첩해 사용할 수도있음
         -> a 가 1~6인지 확인하는 조건에서 중간값인 3부터 실행하면 반복횟수를 줄일 수 있음

중첩사용시 유의할 점

if ( a<0) 
{
    if ( b < 0)
    {
        printf("sd");
    }
} 
else 
{
    printf("wef");
}
라고 할때 
27, 32의 {} 중괄호를 지우면 else문이 a조건과 묶이는 것이아니라, 가까운 (b 조건)곳에 연결이되어서
a 조건이 거짓이면 else도 실행이 되지 않는다.


switch - case문
1. 조건식으로 정수만
2. 기본적으로 case는 break를 포함

실행단계
switch의 조건식을 확인;
이후 이와 일치하는 상수를 가진 case위치로 건너뜀
일치하는 상수가 없다면 default로 넘어감
default가 없다면 생략

case와 default는 건너뛸 위치를 표시하는 레이블이라고 생각하면됨

만일 case문에 break가 없다면?
case 1:
    printf('s');
case 2:
    printf('3');
    break
1인경우
결과 : s3 하고 출력이 종료됨
