4-1
산술, 관계, 논리 연산자

애초에 프로그램은 명령어의 묶음임
일반적으로 연산자는 컴파일되면 명령어로 바뀜

산술연산자
+,-,x,/,% 의 수학적인 연산자
2개의 피연산자를 사용.
-는 부호를 바꿀떄도 사용하게됨

대입연산자
=
오른쪽 수식의 결과를 왼쪽 변수에 저장함.    

증감연산자
++, --
++a 은 a = a + 1과같음
여기서 ++10은 불가능
상수 10에 대입을 한다는게 말이 안됨

전위표기와 후위표기
a = 2
++a와 a++의 차이점이 뭘까 각각을 전위표기, 후위표기라고함
pre = ++a * 3
post = a++ * 3
pre --> 9, post --> 6
a --> 3

관계 연산자
<, >, ==, !=, 등등
피연산자를 2개 사용. 연산의 결과값은 1 또는 0임(참과 거짓)

논리연산자
논리관계를 파악함
&&, ||, ! (and, or, not)

중요한점
10 < A < 20 의 결과는 무엇인가
10 < A 의 결과는 항상 0, 혹은 1이 나옴
따라서 (10 < A) < 20의 결과는 항상 참임
우리가 생각한 결과를 도출해내려면 논리연산자를 함께 사용해야함

숏서킷룰
숏서킷룰은 좌항만 확인하여 연산결과를 판별하는 것임
&& 연산자의 좌항이 0이라면 두 피연산자를 봤을 떄도 0일것임
컴퓨터는 좌항으로 결과를 도출해 냈다면 우항까지 안봄
따라서
(a < 20) && (++b > 21)
이라는 수식이 있다면 a < 20이 0이라면 우항은 확인해보지도 않고 결과를 내기 때문에
++b 즉 b = b + 1을 하지 않으므로 결과값이 이상해 질 수도 있다라는 것



연산식이 컴퓨터 내부에서 처리되는 방식
sum = a + b를 처리하는 과정을 생각해보자
변수에 저장되어있는 값을 사용하려면 메모리에 있는 a와 b의 값을 cpu의 저장공간인 레지스터로 복사해야함
이것을 로드 라고함
a, b의 값을 로드하여 레지스터로 복사함.
이후 연산장치인 ALU에 의해 연산이 진행됨. 덧셈
그 결과값은 일단 레지스터에 저장됨
대입연산을 진행하여 레지스터에 값이 메모리 공간인 sum으로 이동됨
대입연산은 스토어라고 함

cpu의 메모리와 우리가 아는 메모리(RAM)의 차이점
CPU의 메모리는 레지스터라고함. 여기에 연산할 데이터(로드)와 연산후의 결과를 임시로 저장함.
메모리(RAM)에 변수의 값이 저장되는 것.
위의 차이가 있음
레지스터는 CPU의 클럭과 1:1로 동기화가 되어있어서 메모리(RAM)보다 엄청 빠르다



4-2
그외 유용한 연산자는
피연산자가 3개가 사용되기도함

형변환 연산자
(자료형)피연산자
(double)10 => 10.0
메모리에 있는 값을 일시적으로 사용하는 것이므로, 변수에 저장되어있는 값이 바뀌진 않음
(int)res => 소숫점 빠짐
res의 값을 load함. (int)연산 레지스터에 결과값이 남음

자동형변환
컴퓨터는 형태에 따라 다른 연산방법을 사용함.
피연산자가 2개이상이라면 피연산자간의 형태를 맞춰주어야함.
-> 자동형변환
기본 규칙
; 데이터 크기가 작은 값이 큰값으로 일치시킴
int와 double간의 연산이면 double로 형태가 일치됨
다만 대입연산은 무조건 좌항의 변수에 형태를 맞춤( 당연한 것 )

sizeof 연산자
피연산자를 하나 사용
sizeof(피연산자)
피연산자의 크기를 바이트 단위로 계산해서 알려줌
피연산자의 대상은 변수, 상수, 수식, 자료형이 가능함 ( 수식은 결과값에 대한 크기를 알려줌 )
문자열도 가능함 ( 문자열의 길이 + 1) : 사유는 \0 널문자 떄문

sizeof 는 괄호없이 사용해도 되지만, 수식을 피연산자로 사용하는 경우도 있어서 의도하는 바와 달라질 수 있음

복합대입 연산자는
+=, -=, *=, /=, %=
저장되는 공간(RAM)과 연산되는 공간(레지스터)가 다르다는 것을 이해하면됨

콤마 연산자
** 콤마연산자는 대입연산자보다 우선순위가 낮은 유일한 연산자임
한번에 여러개의 수식을 차례로 나열해야 할때
왼쪽부터 오른쪽으로 차례로 연산을 수행하며 가장오른쪽의 피연산자가 결과값이 됨
res = (++a, ++b)라면
a의 값 +1, b의 값 +1 이 되고 가장 오른쪽의 피연산자가 결과값이 되므로 b + 1이 res에 대입되게 됨

res = ++a, ++b라면
res의 값은 a + 1이 되고 ++b 연산을 진행하게 될꺼임


조건연산자
? : 피연산자가 세개임

(조건식) ? (참이면 ) : (거짓이면)
res = (a > b) ? a : b도 되지만
(a > b) ? (res = a) : (res = b)


비트연산자
& , | , ^, ~, <<, >>
데이터를 비트 단위로 연산함
비트 논리연산자와 비트 이동연산자가 있음
비트 연산자는 데이터를 비트로 정확하게 표현할 수 있는 정수에만 사용할 수 있다.
(실수 X)
-> 그냥 연산 자체가 되지않음

<<연산은 무조건 우측에 0을 채움
>>연산은 부호에 따라 양수면0, 음수면1을 채움

또한 비트연산자도 복합대입 연산자로 활용할 수 있다.


연산자의 우선순위와 연산방향
단항 > 이항 > 삼항 연산자
산술 > ( 비트이동 ) > 관계 > 논리 연산자